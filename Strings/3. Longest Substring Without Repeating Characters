
T.C- O(2N)
class Solution {
    public int lengthOfLongestSubstring(String str) {
        int max_len = 0;
        HashSet<Character> set = new HashSet<>();
        int l = 0;
        for(int i=0;i<str.length();i++){
            // int len = 0;
            if(set.contains(str.charAt(i))){
                while(l<i && set.contains(str.charAt(i))){
                    set.remove(str.charAt(l));
                    l++;
                }
              }
            set.add(str.charAt(i));
            // len = i-l+1;
           max_len = Math.max(max_len, i-l+1);
        }
        return max_len;
         
    }
}



## Better approach - T.C - O(N)
class Solution {
    public int lengthOfLongestSubstring(String str) {
        int max_len = 0;
        HashMap<Character, Integer> map = new HashMap<>();
        int l = 0;
        for(int i=0;i<str.length();i++){
            if(map.containsKey(str.charAt(i))){
                l = Math.max(l, map.get(str.charAt(i))+1);
            }
            map.put(str.charAt(i), i);
            max_len = Math.max(max_len, i-l+1);
        }
         return max_len;
    }
}
