BRUTE-FORCE		
public class Solution {
	public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
		  while(headB!=null){
			ListNode temp = headA;
			while(temp!=null){
			if(temp==headB){
				return headB;
			}
			temp = temp.next;
			}
			headB = headB.next;
		}
		return null;
	}
}		

OPTIMAL		
public class Solution {
	public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
	  HashSet<ListNode> set = new HashSet<>();
		while(headA!=null){
			set.add(headA);
			headA= headA.next;
		}
		while(headB!=null){
			if(set.contains(headB)){
				return headB;
			}
			headB = headB.next;
		}
		return null;
	}
}
Optimised:
public class Solution {
	public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
	 ListNode d1 = headA;
	ListNode d2 = headB;
		while(d1!=d2){
			d1=d1==null?headB:d1.next;
			d2 = d2==null?headA:d2.next;
		}
		return d2;
	}
}
