Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3




FLOYD'S CYCLE ALGORITHM
class Solution {
		public int findDuplicate(int[] nums) {
	   int fast =0, slow = 0;
			while(true){
				slow = nums[slow];
				fast = nums[nums[fast]];

				if(fast == slow){
					break;
				}
			}

			int slow2 = 0;
			while(true){
				slow = nums[slow];
				slow2 = nums[slow2];

				if(slow == slow2){
					return slow;
				}
			}
		}
	}
MARKER APPROACH
class Solution {
	public int findDuplicate(int[] nums) {
	for(int i=0;i<nums.length;i++){
		int idx = Math.abs(nums[i])-1;
		int val = nums[idx];

		if(val<0){
			return idx+1;
		}
		else{
			nums[idx]*=-1;
		}
	}
		return -1;
	}
}
