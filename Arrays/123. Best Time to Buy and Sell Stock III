You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 105
Accepted
378,233
Submissions
876,051







class Solution {
    public int maxProfit(int[] prices) {
      // max_profit_if_sold_today-> mpifst;
    // least_so_far -> lsf;
        int n = prices.length;
        int mpifst = 0; int lsf = prices[0];
        int[] dp1 = new int[n];
        for(int i=1;i<n;i++){
            if(lsf>prices[i]){
                lsf = prices[i];
            }
            mpifst = prices[i] - lsf;
            if(mpifst>dp1[i-1]){
                dp1[i] = mpifst;
            }
            else{
                dp1[i] = dp1[i-1];
            }
        }
        //max_profit_if_bought_today = mpibt;
        //max_after_today = mat;
        int mpifbt = 0;
        int mat = prices[n-1];
        int dp2[] = new int[n];
        
        for(int i=prices.length-2;i>=0;i--){
            if(prices[i]>mat){
                mat = prices[i];
            }
            mpifbt =mat- prices[i] ;
            if(mpifbt>dp2[i+1]){
                dp2[i] = mpifbt;
            }
            else{
                dp2[i] = dp2[i+1];
            }
        }
        int op = 0;
        for(int i=0;i<prices.length;i++)
        {
            if(dp1[i]+dp2[i]>op){
                op = dp1[i]+dp2[i];
            }
        }
        return op;
    }
}
